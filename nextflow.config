manifest {
  name = 'ViralClust'
  mainScript = 'viralclust.nf'
  author = 'Kevin Lamkiewicz'
}

// default parameters
params {
  max_cores = Runtime.runtime.availableProcessors()
  cores = '1'
  memory = '16.GB'
  help = false
  ClusterHelp = false
  profile = false

  // input
  // ---> mandatory
  reference = '/home/assmanne/ABACADABRA/assets/NC_045512.2.fasta'
  dummy = '/home/assmanne/ABACADABRA/assets/dummy'
  usher = '/home/assmanne/Freyja/freyja/data/usher_barcodes.csv'
  // ---> only if sort_reads==true
  primer = '/scratch/assmanne/2022-05-20-sewage-greifswald/V280/nCoV-2019-SPIKE.tsv'
  bed = '/scratch/assmanne/2022-05-20-sewage-greifswald/V280/nCoV-2019-SPIKE.scheme.bed'
  // ---> only if prepare_mixture==true
  mixture_fastqs = '/scratch/assmanne/clinical_mix.csv'
  mixture_lineages = '/scratch/assmanne/clinical-mixtures/lineages.csv'
  // ---> if mode==real
  fastq = ''

  // output
  output = 'output'
  amplicon_data = '01-amplicon_data'
  hdbscan_output = '02-hdbscan'
  eval_output = '03-evaluation'
  abundances = '04_abundances'
  runinfo = 'runinfo'

  // modules on/off
  sort_reads = true
  prepare_mixture = false
  mode = 'real'
  variant_caller = 'ivar'
  unknown = true
  
  // parameters
  hdbscan_params = '--hdbscan_metric cosine --min_samples 5 --min_cluster_size 5 --cluster_selection_epsilon 0.1'
  umap_params = '-k 7 --umap_metric cosine --n_components 2 --n_neighbors 15 --min_dist 0.1'
  threshold = '0.01'
  min_read_len = '100'
  max_primer_mismatch ='3'
  sample_size = '100000'

  // optional configurations
  workdir = "/tmp/nextflow-work-$USER"
  condaCache = "conda"
  cloudDatabase = false
  cachedir = "conda"
}

dag {
  enabled = true
  file = "${params.output}/${params.runinfo}/pipeline_dag.html"
  overwrite = true
}

report {
  enabled = true
  file = "${params.output}/${params.runinfo}/execution_report.html"
  overwrite = true
}

timeline {
  enabled = true
  file = "${params.output}/${params.runinfo}/execution_timeline.html"
  overwrite = true
}

trace {
    enabled = true
    file = "${params.output}/${params.runinfo}/pipeline_trace.txt"
    fields = 'task_id,name,status,exit,realtime,%cpu,rss'
    overwrite = true
}

profiles {
  local {
    params.cloudProcess = false
    params.cloudDatabase = false
    includeConfig 'configs/local.config'
  }

  conda {
    params.cloudProcess = false
    params.cloudDatabase = false
    conda.cacheDir = params.condaCache
    includeConfig 'configs/conda.config'
  }

  // predefined combinations
  // local execution with conda
  standard {
    //process.scratch = true
    conda.enabled = true
    conda.useMamba = true
    conda.createTimeout = '1h'
    conda.cacheDir = params.condaCache
    process.cache = 'lenient'
    includeConfig 'configs/local.config'
    includeConfig 'configs/conda.config'
  }

}
